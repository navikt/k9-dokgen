name: Build and deploy

on:
  push:
    branches:
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_BASE: ghcr.io/${{ github.repository }}
  CLUSTER: dev-gcp

jobs:
  kompiler:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      issues: write
    steps:

      - name: Sjekk ut kode
        uses: actions/checkout@v3

      - name: Logger inn i Docker packages
        run : |
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login --username "x-access-token" --password-stdin ghcr.io

      - name: Test med up.sh
        run: chmod +x *.sh && ./up.sh

      - name: Hent tag
        run: echo "TAG=$(date +'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Lag image-navn
        run: echo "IMAGE=$IMAGE_BASE:$TAG" >> $GITHUB_ENV

      - name: Bygg, tag og push Docker image
        run: |
          docker build --tag ${IMAGE} --tag ${IMAGE_BASE}:latest .
          docker push ${IMAGE_BASE} --all-tags

      - name: Deploy k9-dokgen-kontrakt artifact
        run: |
          ./collect-contracts.sh
          mvn deploy -e --settings ./.m2/settings.xml --file build -Dsha1=-$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GH_EXTENDED_ACCESS_TOKEN }}

      - name: Lukk gamle issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      - name: Opprett deployment issue
        id: createdeployissue
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create( {
              owner: context.issue.owner,
              repo: context.issue.repo,
              labels: ['deployment'],
              body: '${{ github.sha }}',
              title: 'Deploy av ${{ env.TAG }}'})
            .then(response => {
               const issue = { owner: context.issue.owner,
                             repo: context.issue.repo,
                             issue_number: response.data.number }
               github.rest.issues.createComment({
                 ...issue,
                 body: 'Kommenter enten "/promote dev-gcp" eller "/promote prod-gcp"',
                 title: 'For deploy av ${{ env.TAG }} til miljø'
               })
               core.setOutput('number', issue.issue_number);
            });

      - name: Trigg deploy til dev-gcp
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_EXTENDED_ACCESS_TOKEN }}
          script: |
            const issue = { owner: context.issue.owner,
                            repo: context.issue.repo,
                            issue_number: ${{ steps.createdeployissue.outputs.number }} }
            github.rest.issues.createComment({
              ...issue,
              body: '/promote dev-gcp',
              title: 'Deploy av ${{ env.TAG }} til miljø'
            })
