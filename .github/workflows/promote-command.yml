name: Promote
on:
  repository_dispatch:
    types: [promote-command]
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_BASE: ghcr.io/${{ github.repository }}

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:

      - name: Set variabler for image, namespace og cluster
        shell: bash
        run: |
          echo "TAG=$(echo ${{ github.event.client_payload.slash_command.arg1 }} | cut -c16-22)" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE_BASE:${{ github.event.client_payload.slash_command.arg1 }}" >> $GITHUB_ENV
          echo "CLUSTER=${{ github.event.client_payload.slash_command.arg2 }}" >> $GITHUB_ENV
          echo "NAMESPACE=${{ github.event.client_payload.slash_command.arg3 }}" >> $GITHUB_ENV

      - name: Sjekk ut kode
        uses: actions/checkout@v1.2.0
        with:
          ref: ${{ env.TAG }}

      - name: Promoter til cluster og namespace
        uses: nais/deploy/actions/deploy@v1
        env:
          PRINT_PAYLOAD: true
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: nais/naiserator.yaml
          VARS: nais/${{ env.CLUSTER }}.json

      - name: Oppdater kommentar med deployment status ved feil
        if: failure()
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_EXTENDED_ACCESS_TOKEN}}
          script: |
            const issue = { owner: context.issue.owner,
                            repo: context.issue.repo,
                            issue_number: ${{ github.event.client_payload.github.payload.issue.number }} }
            github.issues.createComment({...issue,
                                    title: 'Deploy av ${{ env.TAG }}',
                                    body: 'promote til ${{ github.event.client_payload.slash_command.args }} feilet'})
      - name: Oppdater kommentar med deployment status
        if: success()
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issue = { owner: context.issue.owner,
                            repo: context.issue.repo,
                            issue_number: ${{ github.event.client_payload.github.payload.issue.number }} }
            github.issues.createComment({...issue,
                                    body: 'promote til ${{ github.event.client_payload.slash_command.args }} utført'})
            github.issues.addLabels({...issue, labels: ['deployment','${{ env.CLUSTER }}-${{ env.NAMESPACE }}']})
      - name: Klargjør for å tagge prodsatt commit
        if: success() && env.CLUSTER == 'prod-fss'
        run: |
          echo "NOW=$(TZ=Europe/Oslo date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse ${{ env.TAG }})" >> $GITHUB_ENV
      - name: Tagg prodsatt commit
        if: success() && env.CLUSTER == 'prod-fss'
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const latestName = "PROD"
            const tagName = "PROD_${{ env.NOW }}"
            console.log("lager tagg=" + tagName)
            github.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/' + tagName,
                sha: "${{ env.COMMIT_SHA }}"
            }).then((res) => {
                console.log("laget tagg=" + tagName)
            })

            const latestRef = 'tags/' + latestName
            console.log("ser om tagg="+ latestRef + " finnes...")
            try {
              let previous = await github.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: latestRef,
              })
              console.log(latestRef + " finnes! sletter...")

              let slettet = await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: latestRef,
              })

              console.log("slettet gamle " + latestName)

            } catch(err) {
              if (err.status == 404) {
                console.log("fant ikke ref " + latestRef)
              } else {
                console.log(err)
                throw Error("Feil ved henting/sletting av " + latestRef + ": " + err.status)
              }
            }

            console.log("lager tagg=" + latestName)
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/' + latestName,
              sha: "${{ env.COMMIT_SHA }}"
            }).then((res) => {
              console.log("laget tagg=" + latestName)
            })